
011KeypadInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fd8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001164  08001164  00002164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011a4  080011a4  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  080011a4  080011a4  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011a4  080011a4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011a4  080011a4  000021a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080011a8  080011a8  000021a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080011ac  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f04  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003aa  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000107  00000000  00000000  000044b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bc1  00000000  00000000  000045bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001700  00000000  00000000  00007180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009a32  00000000  00000000  00008880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000122b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b50  00000000  00000000  000122f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00012e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000005c 	.word	0x2000005c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800114c 	.word	0x0800114c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000060 	.word	0x20000060
 80001c8:	0800114c 	.word	0x0800114c

080001cc <main>:
void row3LowReadColomns(void);
void makeRow4Low(void);
void row4LowReadColomns(void);

int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	init();
 80001d0:	f000 f816 	bl	8000200 <init>

	while(1)
	{
//		printf("PA5: %d, PA6: %d, PA7: %d, PA9: %d\n", pPortAInpReg->pin_5, pPortAInpReg->pin_6, pPortAInpReg->pin_7, pPortAInpReg->pin_9);

		makeAllRowHigh();
 80001d4:	f000 f88a 	bl	80002ec <makeAllRowHigh>

		makeRow1Low();
 80001d8:	f000 f8a6 	bl	8000328 <makeRow1Low>
//		printf("PB1: %d, PB2: %d, PB14: %d, PB15: %d\n", pPortBOutReg->pin_1, pPortBOutReg->pin_2, pPortBOutReg->pin_14, pPortBOutReg->pin_15);

		row1LowReadColomns();
 80001dc:	f000 f8c2 	bl	8000364 <row1LowReadColomns>

		makeRow2Low();
 80001e0:	f000 f8fe 	bl	80003e0 <makeRow2Low>
//		printf("PB1: %d, PB2: %d, PB14: %d, PB15: %d\n", pPortBOutReg->pin_1, pPortBOutReg->pin_2, pPortBOutReg->pin_14, pPortBOutReg->pin_15);

		row2LowReadColomns();
 80001e4:	f000 f91a 	bl	800041c <row2LowReadColomns>

		makeRow3Low();
 80001e8:	f000 f956 	bl	8000498 <makeRow3Low>
//		printf("PB1: %d, PB2: %d, PB14: %d, PB15: %d\n", pPortBOutReg->pin_1, pPortBOutReg->pin_2, pPortBOutReg->pin_14, pPortBOutReg->pin_15);

		row3LowReadColomns();
 80001ec:	f000 f972 	bl	80004d4 <row3LowReadColomns>

		makeRow4Low();
 80001f0:	f000 f9ae 	bl	8000550 <makeRow4Low>
//		printf("PB1: %d, PB2: %d, PB14: %d, PB15: %d\n", pPortBOutReg->pin_1, pPortBOutReg->pin_2, pPortBOutReg->pin_14, pPortBOutReg->pin_15);

		row4LowReadColomns();
 80001f4:	f000 f9ca 	bl	800058c <row4LowReadColomns>

		delay();
 80001f8:	f000 f862 	bl	80002c0 <delay>
		makeAllRowHigh();
 80001fc:	bf00      	nop
 80001fe:	e7e9      	b.n	80001d4 <main+0x8>

08000200 <init>:
	}

}

void init(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	// 1. Enable the clock for GPIO A and GPIO B
	pClkCtrlReg->gpioa_en = ENABLE;
 8000204:	4a2b      	ldr	r2, [pc, #172]	@ (80002b4 <init+0xb4>)
 8000206:	6813      	ldr	r3, [r2, #0]
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6013      	str	r3, [r2, #0]
	pClkCtrlReg->gpiob_en = ENABLE;
 800020e:	4a29      	ldr	r2, [pc, #164]	@ (80002b4 <init+0xb4>)
 8000210:	6813      	ldr	r3, [r2, #0]
 8000212:	f043 0302 	orr.w	r3, r3, #2
 8000216:	6013      	str	r3, [r2, #0]

	// 2. Make all row IOs mode as OUTPUT
	pPortBModeReg->pin_1  = MODE_OUTPUT;
 8000218:	4a27      	ldr	r2, [pc, #156]	@ (80002b8 <init+0xb8>)
 800021a:	6813      	ldr	r3, [r2, #0]
 800021c:	2101      	movs	r1, #1
 800021e:	f361 0383 	bfi	r3, r1, #2, #2
 8000222:	6013      	str	r3, [r2, #0]
	pPortBModeReg->pin_2  = MODE_OUTPUT;
 8000224:	4a24      	ldr	r2, [pc, #144]	@ (80002b8 <init+0xb8>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	2101      	movs	r1, #1
 800022a:	f361 1305 	bfi	r3, r1, #4, #2
 800022e:	6013      	str	r3, [r2, #0]
	pPortBModeReg->pin_14 = MODE_OUTPUT;
 8000230:	4a21      	ldr	r2, [pc, #132]	@ (80002b8 <init+0xb8>)
 8000232:	6813      	ldr	r3, [r2, #0]
 8000234:	2101      	movs	r1, #1
 8000236:	f361 731d 	bfi	r3, r1, #28, #2
 800023a:	6013      	str	r3, [r2, #0]
	pPortBModeReg->pin_15 = MODE_OUTPUT;
 800023c:	4a1e      	ldr	r2, [pc, #120]	@ (80002b8 <init+0xb8>)
 800023e:	6813      	ldr	r3, [r2, #0]
 8000240:	2101      	movs	r1, #1
 8000242:	f361 739f 	bfi	r3, r1, #30, #2
 8000246:	6013      	str	r3, [r2, #0]

	// 3. Make all colomn IOs mode as INPUT
	pPortAModeReg->pin_5 = MODE_INPUT;
 8000248:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800024c:	6813      	ldr	r3, [r2, #0]
 800024e:	f36f 238b 	bfc	r3, #10, #2
 8000252:	6013      	str	r3, [r2, #0]
	pPortAModeReg->pin_6 = MODE_INPUT;
 8000254:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000258:	6813      	ldr	r3, [r2, #0]
 800025a:	f36f 330d 	bfc	r3, #12, #2
 800025e:	6013      	str	r3, [r2, #0]
	pPortAModeReg->pin_7 = MODE_INPUT;
 8000260:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000264:	6813      	ldr	r3, [r2, #0]
 8000266:	f36f 338f 	bfc	r3, #14, #2
 800026a:	6013      	str	r3, [r2, #0]
	pPortAModeReg->pin_9 = MODE_INPUT;
 800026c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000270:	6813      	ldr	r3, [r2, #0]
 8000272:	f36f 4393 	bfc	r3, #18, #2
 8000276:	6013      	str	r3, [r2, #0]

	// 4. Activate Input pull-up register
	pPortAPupdReg->pin_5 = INPUT_PULLUP;
 8000278:	4a10      	ldr	r2, [pc, #64]	@ (80002bc <init+0xbc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	2101      	movs	r1, #1
 800027e:	f361 238b 	bfi	r3, r1, #10, #2
 8000282:	6013      	str	r3, [r2, #0]
	pPortAPupdReg->pin_6 = INPUT_PULLUP;
 8000284:	4a0d      	ldr	r2, [pc, #52]	@ (80002bc <init+0xbc>)
 8000286:	6813      	ldr	r3, [r2, #0]
 8000288:	2101      	movs	r1, #1
 800028a:	f361 330d 	bfi	r3, r1, #12, #2
 800028e:	6013      	str	r3, [r2, #0]
	pPortAPupdReg->pin_7 = INPUT_PULLUP;
 8000290:	4a0a      	ldr	r2, [pc, #40]	@ (80002bc <init+0xbc>)
 8000292:	6813      	ldr	r3, [r2, #0]
 8000294:	2101      	movs	r1, #1
 8000296:	f361 338f 	bfi	r3, r1, #14, #2
 800029a:	6013      	str	r3, [r2, #0]
	pPortAPupdReg->pin_9 = INPUT_PULLUP;
 800029c:	4a07      	ldr	r2, [pc, #28]	@ (80002bc <init+0xbc>)
 800029e:	6813      	ldr	r3, [r2, #0]
 80002a0:	2101      	movs	r1, #1
 80002a2:	f361 4393 	bfi	r3, r1, #18, #2
 80002a6:	6013      	str	r3, [r2, #0]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	4002104c 	.word	0x4002104c
 80002b8:	48000400 	.word	0x48000400
 80002bc:	4800000c 	.word	0x4800000c

080002c0 <delay>:

void delay(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 300000; i++);
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e002      	b.n	80002d2 <delay+0x12>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a04      	ldr	r2, [pc, #16]	@ (80002e8 <delay+0x28>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d9f8      	bls.n	80002cc <delay+0xc>
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	000493df 	.word	0x000493df

080002ec <makeAllRowHigh>:
	for (uint32_t i = 0; i < 30000; i++);
}


void makeAllRowHigh(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	// Make all row GPIOs as HIGH state
	pPortBOutReg->pin_1 = HIGH;
 80002f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000324 <makeAllRowHigh+0x38>)
 80002f2:	6813      	ldr	r3, [r2, #0]
 80002f4:	f043 0302 	orr.w	r3, r3, #2
 80002f8:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_2 = HIGH;
 80002fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <makeAllRowHigh+0x38>)
 80002fc:	6813      	ldr	r3, [r2, #0]
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_14 = HIGH;
 8000304:	4a07      	ldr	r2, [pc, #28]	@ (8000324 <makeAllRowHigh+0x38>)
 8000306:	6813      	ldr	r3, [r2, #0]
 8000308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800030c:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_15 = HIGH;
 800030e:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <makeAllRowHigh+0x38>)
 8000310:	6813      	ldr	r3, [r2, #0]
 8000312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000316:	6013      	str	r3, [r2, #0]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	48000414 	.word	0x48000414

08000328 <makeRow1Low>:

void makeRow1Low(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	// Make all row GPIOs as HIGH state
	pPortBOutReg->pin_1 = LOW;
 800032c:	4a0c      	ldr	r2, [pc, #48]	@ (8000360 <makeRow1Low+0x38>)
 800032e:	6813      	ldr	r3, [r2, #0]
 8000330:	f36f 0341 	bfc	r3, #1, #1
 8000334:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_2 = HIGH;
 8000336:	4a0a      	ldr	r2, [pc, #40]	@ (8000360 <makeRow1Low+0x38>)
 8000338:	6813      	ldr	r3, [r2, #0]
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_14 = HIGH;
 8000340:	4a07      	ldr	r2, [pc, #28]	@ (8000360 <makeRow1Low+0x38>)
 8000342:	6813      	ldr	r3, [r2, #0]
 8000344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000348:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_15 = HIGH;
 800034a:	4a05      	ldr	r2, [pc, #20]	@ (8000360 <makeRow1Low+0x38>)
 800034c:	6813      	ldr	r3, [r2, #0]
 800034e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000352:	6013      	str	r3, [r2, #0]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	48000414 	.word	0x48000414

08000364 <row1LowReadColomns>:

void row1LowReadColomns(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	// Scan the colomns
	// Check C1 (PA5) low or high
	if(!(pPortAInpReg->pin_5)){
 8000368:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <row1LowReadColomns+0x68>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	2b00      	cmp	r3, #0
 8000374:	d104      	bne.n	8000380 <row1LowReadColomns+0x1c>
		// Key is Pressed
		delay();
 8000376:	f7ff ffa3 	bl	80002c0 <delay>
		printf("1\n");
 800037a:	4815      	ldr	r0, [pc, #84]	@ (80003d0 <row1LowReadColomns+0x6c>)
 800037c:	f000 fb52 	bl	8000a24 <puts>
	}
	// Check C2 (PA6) low or high
	if(!(pPortAInpReg->pin_6)){
 8000380:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <row1LowReadColomns+0x68>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2b00      	cmp	r3, #0
 800038c:	d104      	bne.n	8000398 <row1LowReadColomns+0x34>
		// Key is Pressed
		delay();
 800038e:	f7ff ff97 	bl	80002c0 <delay>
		printf("2\n");
 8000392:	4810      	ldr	r0, [pc, #64]	@ (80003d4 <row1LowReadColomns+0x70>)
 8000394:	f000 fb46 	bl	8000a24 <puts>
	}
	// Check C3 (PA7) low or high
	if(!(pPortAInpReg->pin_7)){
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <row1LowReadColomns+0x68>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d104      	bne.n	80003b0 <row1LowReadColomns+0x4c>
		// Key is Pressed
		delay();
 80003a6:	f7ff ff8b 	bl	80002c0 <delay>
		printf("3\n");
 80003aa:	480b      	ldr	r0, [pc, #44]	@ (80003d8 <row1LowReadColomns+0x74>)
 80003ac:	f000 fb3a 	bl	8000a24 <puts>
	}
	// Check C4 (PA9) low or high
	if(!(pPortAInpReg->pin_9)){
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <row1LowReadColomns+0x68>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d104      	bne.n	80003c8 <row1LowReadColomns+0x64>
		// Key is Pressed
		delay();
 80003be:	f7ff ff7f 	bl	80002c0 <delay>
		printf("A\n");
 80003c2:	4806      	ldr	r0, [pc, #24]	@ (80003dc <row1LowReadColomns+0x78>)
 80003c4:	f000 fb2e 	bl	8000a24 <puts>
	}
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	48000010 	.word	0x48000010
 80003d0:	08001164 	.word	0x08001164
 80003d4:	08001168 	.word	0x08001168
 80003d8:	0800116c 	.word	0x0800116c
 80003dc:	08001170 	.word	0x08001170

080003e0 <makeRow2Low>:

void makeRow2Low(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	// Make all row GPIOs as HIGH state
	pPortBOutReg->pin_1 = HIGH;
 80003e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000418 <makeRow2Low+0x38>)
 80003e6:	6813      	ldr	r3, [r2, #0]
 80003e8:	f043 0302 	orr.w	r3, r3, #2
 80003ec:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_2 = LOW;
 80003ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000418 <makeRow2Low+0x38>)
 80003f0:	6813      	ldr	r3, [r2, #0]
 80003f2:	f36f 0382 	bfc	r3, #2, #1
 80003f6:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_14 = HIGH;
 80003f8:	4a07      	ldr	r2, [pc, #28]	@ (8000418 <makeRow2Low+0x38>)
 80003fa:	6813      	ldr	r3, [r2, #0]
 80003fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000400:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_15 = HIGH;
 8000402:	4a05      	ldr	r2, [pc, #20]	@ (8000418 <makeRow2Low+0x38>)
 8000404:	6813      	ldr	r3, [r2, #0]
 8000406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800040a:	6013      	str	r3, [r2, #0]
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	48000414 	.word	0x48000414

0800041c <row2LowReadColomns>:

void row2LowReadColomns(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	// Scan the colomns
	// Check C1 (PA5) low or high
	if(!(pPortAInpReg->pin_5)){
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <row2LowReadColomns+0x68>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000428:	b2db      	uxtb	r3, r3
 800042a:	2b00      	cmp	r3, #0
 800042c:	d104      	bne.n	8000438 <row2LowReadColomns+0x1c>
		// Key is Pressed
		delay();
 800042e:	f7ff ff47 	bl	80002c0 <delay>
		printf("4\n");
 8000432:	4815      	ldr	r0, [pc, #84]	@ (8000488 <row2LowReadColomns+0x6c>)
 8000434:	f000 faf6 	bl	8000a24 <puts>
	}
	// Check C2 (PA6) low or high
	if(!(pPortAInpReg->pin_6)){
 8000438:	4b12      	ldr	r3, [pc, #72]	@ (8000484 <row2LowReadColomns+0x68>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000440:	b2db      	uxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	d104      	bne.n	8000450 <row2LowReadColomns+0x34>
		// Key is Pressed
		delay();
 8000446:	f7ff ff3b 	bl	80002c0 <delay>
		printf("5\n");
 800044a:	4810      	ldr	r0, [pc, #64]	@ (800048c <row2LowReadColomns+0x70>)
 800044c:	f000 faea 	bl	8000a24 <puts>
	}
	// Check C3 (PA7) low or high
	if(!(pPortAInpReg->pin_7)){
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <row2LowReadColomns+0x68>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000458:	b2db      	uxtb	r3, r3
 800045a:	2b00      	cmp	r3, #0
 800045c:	d104      	bne.n	8000468 <row2LowReadColomns+0x4c>
		// Key is Pressed
		delay();
 800045e:	f7ff ff2f 	bl	80002c0 <delay>
		printf("6\n");
 8000462:	480b      	ldr	r0, [pc, #44]	@ (8000490 <row2LowReadColomns+0x74>)
 8000464:	f000 fade 	bl	8000a24 <puts>
	}
	// Check C4 (PA9) low or high
	if(!(pPortAInpReg->pin_9)){
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <row2LowReadColomns+0x68>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2b00      	cmp	r3, #0
 8000474:	d104      	bne.n	8000480 <row2LowReadColomns+0x64>
		// Key is Pressed
		delay();
 8000476:	f7ff ff23 	bl	80002c0 <delay>
		printf("B\n");
 800047a:	4806      	ldr	r0, [pc, #24]	@ (8000494 <row2LowReadColomns+0x78>)
 800047c:	f000 fad2 	bl	8000a24 <puts>
	}
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	48000010 	.word	0x48000010
 8000488:	08001174 	.word	0x08001174
 800048c:	08001178 	.word	0x08001178
 8000490:	0800117c 	.word	0x0800117c
 8000494:	08001180 	.word	0x08001180

08000498 <makeRow3Low>:

void makeRow3Low(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
	// Make all row GPIOs as HIGH state
	pPortBOutReg->pin_1 = HIGH;
 800049c:	4a0c      	ldr	r2, [pc, #48]	@ (80004d0 <makeRow3Low+0x38>)
 800049e:	6813      	ldr	r3, [r2, #0]
 80004a0:	f043 0302 	orr.w	r3, r3, #2
 80004a4:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_2 = HIGH;
 80004a6:	4a0a      	ldr	r2, [pc, #40]	@ (80004d0 <makeRow3Low+0x38>)
 80004a8:	6813      	ldr	r3, [r2, #0]
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_14 = LOW;
 80004b0:	4a07      	ldr	r2, [pc, #28]	@ (80004d0 <makeRow3Low+0x38>)
 80004b2:	6813      	ldr	r3, [r2, #0]
 80004b4:	f36f 338e 	bfc	r3, #14, #1
 80004b8:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_15 = HIGH;
 80004ba:	4a05      	ldr	r2, [pc, #20]	@ (80004d0 <makeRow3Low+0x38>)
 80004bc:	6813      	ldr	r3, [r2, #0]
 80004be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004c2:	6013      	str	r3, [r2, #0]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	48000414 	.word	0x48000414

080004d4 <row3LowReadColomns>:

void row3LowReadColomns(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	// Scan the colomns
	// Check C1 (PA5) low or high
	if(!(pPortAInpReg->pin_5)){
 80004d8:	4b18      	ldr	r3, [pc, #96]	@ (800053c <row3LowReadColomns+0x68>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d104      	bne.n	80004f0 <row3LowReadColomns+0x1c>
		// Key is Pressed
		delay();
 80004e6:	f7ff feeb 	bl	80002c0 <delay>
		printf("7\n");
 80004ea:	4815      	ldr	r0, [pc, #84]	@ (8000540 <row3LowReadColomns+0x6c>)
 80004ec:	f000 fa9a 	bl	8000a24 <puts>
	}
	// Check C2 (PA6) low or high
	if(!(pPortAInpReg->pin_6)){
 80004f0:	4b12      	ldr	r3, [pc, #72]	@ (800053c <row3LowReadColomns+0x68>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d104      	bne.n	8000508 <row3LowReadColomns+0x34>
		// Key is Pressed
		delay();
 80004fe:	f7ff fedf 	bl	80002c0 <delay>
		printf("8\n");
 8000502:	4810      	ldr	r0, [pc, #64]	@ (8000544 <row3LowReadColomns+0x70>)
 8000504:	f000 fa8e 	bl	8000a24 <puts>
	}
	// Check C3 (PA7) low or high
	if(!(pPortAInpReg->pin_7)){
 8000508:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <row3LowReadColomns+0x68>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d104      	bne.n	8000520 <row3LowReadColomns+0x4c>
		// Key is Pressed
		delay();
 8000516:	f7ff fed3 	bl	80002c0 <delay>
		printf("9\n");
 800051a:	480b      	ldr	r0, [pc, #44]	@ (8000548 <row3LowReadColomns+0x74>)
 800051c:	f000 fa82 	bl	8000a24 <puts>
	}
	// Check C4 (PA9) low or high
	if(!(pPortAInpReg->pin_9)){
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <row3LowReadColomns+0x68>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b00      	cmp	r3, #0
 800052c:	d104      	bne.n	8000538 <row3LowReadColomns+0x64>
		// Key is Pressed
		delay();
 800052e:	f7ff fec7 	bl	80002c0 <delay>
		printf("C\n");
 8000532:	4806      	ldr	r0, [pc, #24]	@ (800054c <row3LowReadColomns+0x78>)
 8000534:	f000 fa76 	bl	8000a24 <puts>
	}
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	48000010 	.word	0x48000010
 8000540:	08001184 	.word	0x08001184
 8000544:	08001188 	.word	0x08001188
 8000548:	0800118c 	.word	0x0800118c
 800054c:	08001190 	.word	0x08001190

08000550 <makeRow4Low>:

void makeRow4Low(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	// Make all row GPIOs as HIGH state
	pPortBOutReg->pin_1 = HIGH;
 8000554:	4a0c      	ldr	r2, [pc, #48]	@ (8000588 <makeRow4Low+0x38>)
 8000556:	6813      	ldr	r3, [r2, #0]
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_2 = HIGH;
 800055e:	4a0a      	ldr	r2, [pc, #40]	@ (8000588 <makeRow4Low+0x38>)
 8000560:	6813      	ldr	r3, [r2, #0]
 8000562:	f043 0304 	orr.w	r3, r3, #4
 8000566:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_14 = HIGH;
 8000568:	4a07      	ldr	r2, [pc, #28]	@ (8000588 <makeRow4Low+0x38>)
 800056a:	6813      	ldr	r3, [r2, #0]
 800056c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000570:	6013      	str	r3, [r2, #0]
	pPortBOutReg->pin_15 = LOW;
 8000572:	4a05      	ldr	r2, [pc, #20]	@ (8000588 <makeRow4Low+0x38>)
 8000574:	6813      	ldr	r3, [r2, #0]
 8000576:	f36f 33cf 	bfc	r3, #15, #1
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	48000414 	.word	0x48000414

0800058c <row4LowReadColomns>:

void row4LowReadColomns(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	// Scan the colomns
	// Check C1 (PA5) low or high
	if(!(pPortAInpReg->pin_5)){
 8000590:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <row4LowReadColomns+0x68>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d104      	bne.n	80005a8 <row4LowReadColomns+0x1c>
		// Key is Pressed
		delay();
 800059e:	f7ff fe8f 	bl	80002c0 <delay>
		printf("*\n");
 80005a2:	4815      	ldr	r0, [pc, #84]	@ (80005f8 <row4LowReadColomns+0x6c>)
 80005a4:	f000 fa3e 	bl	8000a24 <puts>
	}
	// Check C2 (PA6) low or high
	if(!(pPortAInpReg->pin_6)){
 80005a8:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <row4LowReadColomns+0x68>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d104      	bne.n	80005c0 <row4LowReadColomns+0x34>
		// Key is Pressed
		delay();
 80005b6:	f7ff fe83 	bl	80002c0 <delay>
		printf("0\n");
 80005ba:	4810      	ldr	r0, [pc, #64]	@ (80005fc <row4LowReadColomns+0x70>)
 80005bc:	f000 fa32 	bl	8000a24 <puts>
	}
	// Check C3 (PA7) low or high
	if(!(pPortAInpReg->pin_7)){
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <row4LowReadColomns+0x68>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d104      	bne.n	80005d8 <row4LowReadColomns+0x4c>
		// Key is Pressed
		delay();
 80005ce:	f7ff fe77 	bl	80002c0 <delay>
		printf("#\n");
 80005d2:	480b      	ldr	r0, [pc, #44]	@ (8000600 <row4LowReadColomns+0x74>)
 80005d4:	f000 fa26 	bl	8000a24 <puts>
	}
	// Check C4 (PA9) low or high
	if(!(pPortAInpReg->pin_9)){
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <row4LowReadColomns+0x68>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d104      	bne.n	80005f0 <row4LowReadColomns+0x64>
		// Key is Pressed
		delay();
 80005e6:	f7ff fe6b 	bl	80002c0 <delay>
		printf("D\n");
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <row4LowReadColomns+0x78>)
 80005ec:	f000 fa1a 	bl	8000a24 <puts>
	}
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	48000010 	.word	0x48000010
 80005f8:	08001194 	.word	0x08001194
 80005fc:	08001198 	.word	0x08001198
 8000600:	0800119c 	.word	0x0800119c
 8000604:	080011a0 	.word	0x080011a0

08000608 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <ITM_SendChar+0x48>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <ITM_SendChar+0x48>)
 8000618:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800061c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <ITM_SendChar+0x4c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a0c      	ldr	r2, [pc, #48]	@ (8000654 <ITM_SendChar+0x4c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800062a:	bf00      	nop
 800062c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0f8      	beq.n	800062c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800063a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	6013      	str	r3, [r2, #0]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000edfc 	.word	0xe000edfc
 8000654:	e0000e00 	.word	0xe0000e00

08000658 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	e00a      	b.n	8000680 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800066a:	f3af 8000 	nop.w
 800066e:	4601      	mov	r1, r0
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	60ba      	str	r2, [r7, #8]
 8000676:	b2ca      	uxtb	r2, r1
 8000678:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	dbf0      	blt.n	800066a <_read+0x12>
  }

  return len;
 8000688:	687b      	ldr	r3, [r7, #4]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b086      	sub	sp, #24
 8000696:	af00      	add	r7, sp, #0
 8000698:	60f8      	str	r0, [r7, #12]
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	e009      	b.n	80006b8 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	60ba      	str	r2, [r7, #8]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ffab 	bl	8000608 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbf1      	blt.n	80006a4 <_write+0x12>
  }
  return len;
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <_close>:

int _close(int file)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006f2:	605a      	str	r2, [r3, #4]
  return 0;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <_isatty>:

int _isatty(int file)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	@ (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f000 fa8c 	bl	8000c80 <__errno>
 8000768:	4603      	mov	r3, r0
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	@ (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20018000 	.word	0x20018000
 8000794:	00000400 	.word	0x00000400
 8000798:	20000078 	.word	0x20000078
 800079c:	200001c8 	.word	0x200001c8

080007a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a0:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	@ (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ce:	f000 fa5d 	bl	8000c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d2:	f7ff fcfb 	bl	80001cc <main>

080007d6 <LoopForever>:

LoopForever:
  b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   r0, =_estack
 80007d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007e4:	080011ac 	.word	0x080011ac
  ldr r2, =_sbss
 80007e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007ec:	200001c8 	.word	0x200001c8

080007f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_2_IRQHandler>
	...

080007f4 <std>:
 80007f4:	2300      	movs	r3, #0
 80007f6:	b510      	push	{r4, lr}
 80007f8:	4604      	mov	r4, r0
 80007fa:	e9c0 3300 	strd	r3, r3, [r0]
 80007fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000802:	6083      	str	r3, [r0, #8]
 8000804:	8181      	strh	r1, [r0, #12]
 8000806:	6643      	str	r3, [r0, #100]	@ 0x64
 8000808:	81c2      	strh	r2, [r0, #14]
 800080a:	6183      	str	r3, [r0, #24]
 800080c:	4619      	mov	r1, r3
 800080e:	2208      	movs	r2, #8
 8000810:	305c      	adds	r0, #92	@ 0x5c
 8000812:	f000 f9e7 	bl	8000be4 <memset>
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <std+0x58>)
 8000818:	6263      	str	r3, [r4, #36]	@ 0x24
 800081a:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <std+0x5c>)
 800081c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <std+0x60>)
 8000820:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <std+0x64>)
 8000824:	6323      	str	r3, [r4, #48]	@ 0x30
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <std+0x68>)
 8000828:	6224      	str	r4, [r4, #32]
 800082a:	429c      	cmp	r4, r3
 800082c:	d006      	beq.n	800083c <std+0x48>
 800082e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000832:	4294      	cmp	r4, r2
 8000834:	d002      	beq.n	800083c <std+0x48>
 8000836:	33d0      	adds	r3, #208	@ 0xd0
 8000838:	429c      	cmp	r4, r3
 800083a:	d105      	bne.n	8000848 <std+0x54>
 800083c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000844:	f000 ba46 	b.w	8000cd4 <__retarget_lock_init_recursive>
 8000848:	bd10      	pop	{r4, pc}
 800084a:	bf00      	nop
 800084c:	08000a35 	.word	0x08000a35
 8000850:	08000a57 	.word	0x08000a57
 8000854:	08000a8f 	.word	0x08000a8f
 8000858:	08000ab3 	.word	0x08000ab3
 800085c:	2000007c 	.word	0x2000007c

08000860 <stdio_exit_handler>:
 8000860:	4a02      	ldr	r2, [pc, #8]	@ (800086c <stdio_exit_handler+0xc>)
 8000862:	4903      	ldr	r1, [pc, #12]	@ (8000870 <stdio_exit_handler+0x10>)
 8000864:	4803      	ldr	r0, [pc, #12]	@ (8000874 <stdio_exit_handler+0x14>)
 8000866:	f000 b869 	b.w	800093c <_fwalk_sglue>
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000
 8000870:	08000fd5 	.word	0x08000fd5
 8000874:	20000010 	.word	0x20000010

08000878 <cleanup_stdio>:
 8000878:	6841      	ldr	r1, [r0, #4]
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <cleanup_stdio+0x34>)
 800087c:	4299      	cmp	r1, r3
 800087e:	b510      	push	{r4, lr}
 8000880:	4604      	mov	r4, r0
 8000882:	d001      	beq.n	8000888 <cleanup_stdio+0x10>
 8000884:	f000 fba6 	bl	8000fd4 <_fflush_r>
 8000888:	68a1      	ldr	r1, [r4, #8]
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <cleanup_stdio+0x38>)
 800088c:	4299      	cmp	r1, r3
 800088e:	d002      	beq.n	8000896 <cleanup_stdio+0x1e>
 8000890:	4620      	mov	r0, r4
 8000892:	f000 fb9f 	bl	8000fd4 <_fflush_r>
 8000896:	68e1      	ldr	r1, [r4, #12]
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <cleanup_stdio+0x3c>)
 800089a:	4299      	cmp	r1, r3
 800089c:	d004      	beq.n	80008a8 <cleanup_stdio+0x30>
 800089e:	4620      	mov	r0, r4
 80008a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008a4:	f000 bb96 	b.w	8000fd4 <_fflush_r>
 80008a8:	bd10      	pop	{r4, pc}
 80008aa:	bf00      	nop
 80008ac:	2000007c 	.word	0x2000007c
 80008b0:	200000e4 	.word	0x200000e4
 80008b4:	2000014c 	.word	0x2000014c

080008b8 <global_stdio_init.part.0>:
 80008b8:	b510      	push	{r4, lr}
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <global_stdio_init.part.0+0x30>)
 80008bc:	4c0b      	ldr	r4, [pc, #44]	@ (80008ec <global_stdio_init.part.0+0x34>)
 80008be:	4a0c      	ldr	r2, [pc, #48]	@ (80008f0 <global_stdio_init.part.0+0x38>)
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	4620      	mov	r0, r4
 80008c4:	2200      	movs	r2, #0
 80008c6:	2104      	movs	r1, #4
 80008c8:	f7ff ff94 	bl	80007f4 <std>
 80008cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80008d0:	2201      	movs	r2, #1
 80008d2:	2109      	movs	r1, #9
 80008d4:	f7ff ff8e 	bl	80007f4 <std>
 80008d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80008dc:	2202      	movs	r2, #2
 80008de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008e2:	2112      	movs	r1, #18
 80008e4:	f7ff bf86 	b.w	80007f4 <std>
 80008e8:	200001b4 	.word	0x200001b4
 80008ec:	2000007c 	.word	0x2000007c
 80008f0:	08000861 	.word	0x08000861

080008f4 <__sfp_lock_acquire>:
 80008f4:	4801      	ldr	r0, [pc, #4]	@ (80008fc <__sfp_lock_acquire+0x8>)
 80008f6:	f000 b9ee 	b.w	8000cd6 <__retarget_lock_acquire_recursive>
 80008fa:	bf00      	nop
 80008fc:	200001bd 	.word	0x200001bd

08000900 <__sfp_lock_release>:
 8000900:	4801      	ldr	r0, [pc, #4]	@ (8000908 <__sfp_lock_release+0x8>)
 8000902:	f000 b9e9 	b.w	8000cd8 <__retarget_lock_release_recursive>
 8000906:	bf00      	nop
 8000908:	200001bd 	.word	0x200001bd

0800090c <__sinit>:
 800090c:	b510      	push	{r4, lr}
 800090e:	4604      	mov	r4, r0
 8000910:	f7ff fff0 	bl	80008f4 <__sfp_lock_acquire>
 8000914:	6a23      	ldr	r3, [r4, #32]
 8000916:	b11b      	cbz	r3, 8000920 <__sinit+0x14>
 8000918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800091c:	f7ff bff0 	b.w	8000900 <__sfp_lock_release>
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <__sinit+0x28>)
 8000922:	6223      	str	r3, [r4, #32]
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <__sinit+0x2c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1f5      	bne.n	8000918 <__sinit+0xc>
 800092c:	f7ff ffc4 	bl	80008b8 <global_stdio_init.part.0>
 8000930:	e7f2      	b.n	8000918 <__sinit+0xc>
 8000932:	bf00      	nop
 8000934:	08000879 	.word	0x08000879
 8000938:	200001b4 	.word	0x200001b4

0800093c <_fwalk_sglue>:
 800093c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000940:	4607      	mov	r7, r0
 8000942:	4688      	mov	r8, r1
 8000944:	4614      	mov	r4, r2
 8000946:	2600      	movs	r6, #0
 8000948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800094c:	f1b9 0901 	subs.w	r9, r9, #1
 8000950:	d505      	bpl.n	800095e <_fwalk_sglue+0x22>
 8000952:	6824      	ldr	r4, [r4, #0]
 8000954:	2c00      	cmp	r4, #0
 8000956:	d1f7      	bne.n	8000948 <_fwalk_sglue+0xc>
 8000958:	4630      	mov	r0, r6
 800095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800095e:	89ab      	ldrh	r3, [r5, #12]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d907      	bls.n	8000974 <_fwalk_sglue+0x38>
 8000964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000968:	3301      	adds	r3, #1
 800096a:	d003      	beq.n	8000974 <_fwalk_sglue+0x38>
 800096c:	4629      	mov	r1, r5
 800096e:	4638      	mov	r0, r7
 8000970:	47c0      	blx	r8
 8000972:	4306      	orrs	r6, r0
 8000974:	3568      	adds	r5, #104	@ 0x68
 8000976:	e7e9      	b.n	800094c <_fwalk_sglue+0x10>

08000978 <_puts_r>:
 8000978:	6a03      	ldr	r3, [r0, #32]
 800097a:	b570      	push	{r4, r5, r6, lr}
 800097c:	6884      	ldr	r4, [r0, #8]
 800097e:	4605      	mov	r5, r0
 8000980:	460e      	mov	r6, r1
 8000982:	b90b      	cbnz	r3, 8000988 <_puts_r+0x10>
 8000984:	f7ff ffc2 	bl	800090c <__sinit>
 8000988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800098a:	07db      	lsls	r3, r3, #31
 800098c:	d405      	bmi.n	800099a <_puts_r+0x22>
 800098e:	89a3      	ldrh	r3, [r4, #12]
 8000990:	0598      	lsls	r0, r3, #22
 8000992:	d402      	bmi.n	800099a <_puts_r+0x22>
 8000994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000996:	f000 f99e 	bl	8000cd6 <__retarget_lock_acquire_recursive>
 800099a:	89a3      	ldrh	r3, [r4, #12]
 800099c:	0719      	lsls	r1, r3, #28
 800099e:	d502      	bpl.n	80009a6 <_puts_r+0x2e>
 80009a0:	6923      	ldr	r3, [r4, #16]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d135      	bne.n	8000a12 <_puts_r+0x9a>
 80009a6:	4621      	mov	r1, r4
 80009a8:	4628      	mov	r0, r5
 80009aa:	f000 f8c5 	bl	8000b38 <__swsetup_r>
 80009ae:	b380      	cbz	r0, 8000a12 <_puts_r+0x9a>
 80009b0:	f04f 35ff 	mov.w	r5, #4294967295
 80009b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80009b6:	07da      	lsls	r2, r3, #31
 80009b8:	d405      	bmi.n	80009c6 <_puts_r+0x4e>
 80009ba:	89a3      	ldrh	r3, [r4, #12]
 80009bc:	059b      	lsls	r3, r3, #22
 80009be:	d402      	bmi.n	80009c6 <_puts_r+0x4e>
 80009c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80009c2:	f000 f989 	bl	8000cd8 <__retarget_lock_release_recursive>
 80009c6:	4628      	mov	r0, r5
 80009c8:	bd70      	pop	{r4, r5, r6, pc}
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	da04      	bge.n	80009d8 <_puts_r+0x60>
 80009ce:	69a2      	ldr	r2, [r4, #24]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dc17      	bgt.n	8000a04 <_puts_r+0x8c>
 80009d4:	290a      	cmp	r1, #10
 80009d6:	d015      	beq.n	8000a04 <_puts_r+0x8c>
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	6022      	str	r2, [r4, #0]
 80009de:	7019      	strb	r1, [r3, #0]
 80009e0:	68a3      	ldr	r3, [r4, #8]
 80009e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009e6:	3b01      	subs	r3, #1
 80009e8:	60a3      	str	r3, [r4, #8]
 80009ea:	2900      	cmp	r1, #0
 80009ec:	d1ed      	bne.n	80009ca <_puts_r+0x52>
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	da11      	bge.n	8000a16 <_puts_r+0x9e>
 80009f2:	4622      	mov	r2, r4
 80009f4:	210a      	movs	r1, #10
 80009f6:	4628      	mov	r0, r5
 80009f8:	f000 f85f 	bl	8000aba <__swbuf_r>
 80009fc:	3001      	adds	r0, #1
 80009fe:	d0d7      	beq.n	80009b0 <_puts_r+0x38>
 8000a00:	250a      	movs	r5, #10
 8000a02:	e7d7      	b.n	80009b4 <_puts_r+0x3c>
 8000a04:	4622      	mov	r2, r4
 8000a06:	4628      	mov	r0, r5
 8000a08:	f000 f857 	bl	8000aba <__swbuf_r>
 8000a0c:	3001      	adds	r0, #1
 8000a0e:	d1e7      	bne.n	80009e0 <_puts_r+0x68>
 8000a10:	e7ce      	b.n	80009b0 <_puts_r+0x38>
 8000a12:	3e01      	subs	r6, #1
 8000a14:	e7e4      	b.n	80009e0 <_puts_r+0x68>
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	6022      	str	r2, [r4, #0]
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e7ee      	b.n	8000a00 <_puts_r+0x88>
	...

08000a24 <puts>:
 8000a24:	4b02      	ldr	r3, [pc, #8]	@ (8000a30 <puts+0xc>)
 8000a26:	4601      	mov	r1, r0
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	f7ff bfa5 	b.w	8000978 <_puts_r>
 8000a2e:	bf00      	nop
 8000a30:	2000000c 	.word	0x2000000c

08000a34 <__sread>:
 8000a34:	b510      	push	{r4, lr}
 8000a36:	460c      	mov	r4, r1
 8000a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a3c:	f000 f8fc 	bl	8000c38 <_read_r>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	bfab      	itete	ge
 8000a44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000a46:	89a3      	ldrhlt	r3, [r4, #12]
 8000a48:	181b      	addge	r3, r3, r0
 8000a4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a4e:	bfac      	ite	ge
 8000a50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000a52:	81a3      	strhlt	r3, [r4, #12]
 8000a54:	bd10      	pop	{r4, pc}

08000a56 <__swrite>:
 8000a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a5a:	461f      	mov	r7, r3
 8000a5c:	898b      	ldrh	r3, [r1, #12]
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	4605      	mov	r5, r0
 8000a62:	460c      	mov	r4, r1
 8000a64:	4616      	mov	r6, r2
 8000a66:	d505      	bpl.n	8000a74 <__swrite+0x1e>
 8000a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f000 f8d0 	bl	8000c14 <_lseek_r>
 8000a74:	89a3      	ldrh	r3, [r4, #12]
 8000a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a7e:	81a3      	strh	r3, [r4, #12]
 8000a80:	4632      	mov	r2, r6
 8000a82:	463b      	mov	r3, r7
 8000a84:	4628      	mov	r0, r5
 8000a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a8a:	f000 b8e7 	b.w	8000c5c <_write_r>

08000a8e <__sseek>:
 8000a8e:	b510      	push	{r4, lr}
 8000a90:	460c      	mov	r4, r1
 8000a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a96:	f000 f8bd 	bl	8000c14 <_lseek_r>
 8000a9a:	1c43      	adds	r3, r0, #1
 8000a9c:	89a3      	ldrh	r3, [r4, #12]
 8000a9e:	bf15      	itete	ne
 8000aa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000aa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000aa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000aaa:	81a3      	strheq	r3, [r4, #12]
 8000aac:	bf18      	it	ne
 8000aae:	81a3      	strhne	r3, [r4, #12]
 8000ab0:	bd10      	pop	{r4, pc}

08000ab2 <__sclose>:
 8000ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ab6:	f000 b89d 	b.w	8000bf4 <_close_r>

08000aba <__swbuf_r>:
 8000aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abc:	460e      	mov	r6, r1
 8000abe:	4614      	mov	r4, r2
 8000ac0:	4605      	mov	r5, r0
 8000ac2:	b118      	cbz	r0, 8000acc <__swbuf_r+0x12>
 8000ac4:	6a03      	ldr	r3, [r0, #32]
 8000ac6:	b90b      	cbnz	r3, 8000acc <__swbuf_r+0x12>
 8000ac8:	f7ff ff20 	bl	800090c <__sinit>
 8000acc:	69a3      	ldr	r3, [r4, #24]
 8000ace:	60a3      	str	r3, [r4, #8]
 8000ad0:	89a3      	ldrh	r3, [r4, #12]
 8000ad2:	071a      	lsls	r2, r3, #28
 8000ad4:	d501      	bpl.n	8000ada <__swbuf_r+0x20>
 8000ad6:	6923      	ldr	r3, [r4, #16]
 8000ad8:	b943      	cbnz	r3, 8000aec <__swbuf_r+0x32>
 8000ada:	4621      	mov	r1, r4
 8000adc:	4628      	mov	r0, r5
 8000ade:	f000 f82b 	bl	8000b38 <__swsetup_r>
 8000ae2:	b118      	cbz	r0, 8000aec <__swbuf_r+0x32>
 8000ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8000ae8:	4638      	mov	r0, r7
 8000aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	6922      	ldr	r2, [r4, #16]
 8000af0:	1a98      	subs	r0, r3, r2
 8000af2:	6963      	ldr	r3, [r4, #20]
 8000af4:	b2f6      	uxtb	r6, r6
 8000af6:	4283      	cmp	r3, r0
 8000af8:	4637      	mov	r7, r6
 8000afa:	dc05      	bgt.n	8000b08 <__swbuf_r+0x4e>
 8000afc:	4621      	mov	r1, r4
 8000afe:	4628      	mov	r0, r5
 8000b00:	f000 fa68 	bl	8000fd4 <_fflush_r>
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d1ed      	bne.n	8000ae4 <__swbuf_r+0x2a>
 8000b08:	68a3      	ldr	r3, [r4, #8]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	60a3      	str	r3, [r4, #8]
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	6022      	str	r2, [r4, #0]
 8000b14:	701e      	strb	r6, [r3, #0]
 8000b16:	6962      	ldr	r2, [r4, #20]
 8000b18:	1c43      	adds	r3, r0, #1
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d004      	beq.n	8000b28 <__swbuf_r+0x6e>
 8000b1e:	89a3      	ldrh	r3, [r4, #12]
 8000b20:	07db      	lsls	r3, r3, #31
 8000b22:	d5e1      	bpl.n	8000ae8 <__swbuf_r+0x2e>
 8000b24:	2e0a      	cmp	r6, #10
 8000b26:	d1df      	bne.n	8000ae8 <__swbuf_r+0x2e>
 8000b28:	4621      	mov	r1, r4
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	f000 fa52 	bl	8000fd4 <_fflush_r>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d0d9      	beq.n	8000ae8 <__swbuf_r+0x2e>
 8000b34:	e7d6      	b.n	8000ae4 <__swbuf_r+0x2a>
	...

08000b38 <__swsetup_r>:
 8000b38:	b538      	push	{r3, r4, r5, lr}
 8000b3a:	4b29      	ldr	r3, [pc, #164]	@ (8000be0 <__swsetup_r+0xa8>)
 8000b3c:	4605      	mov	r5, r0
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	460c      	mov	r4, r1
 8000b42:	b118      	cbz	r0, 8000b4c <__swsetup_r+0x14>
 8000b44:	6a03      	ldr	r3, [r0, #32]
 8000b46:	b90b      	cbnz	r3, 8000b4c <__swsetup_r+0x14>
 8000b48:	f7ff fee0 	bl	800090c <__sinit>
 8000b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b50:	0719      	lsls	r1, r3, #28
 8000b52:	d422      	bmi.n	8000b9a <__swsetup_r+0x62>
 8000b54:	06da      	lsls	r2, r3, #27
 8000b56:	d407      	bmi.n	8000b68 <__swsetup_r+0x30>
 8000b58:	2209      	movs	r2, #9
 8000b5a:	602a      	str	r2, [r5, #0]
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b60:	81a3      	strh	r3, [r4, #12]
 8000b62:	f04f 30ff 	mov.w	r0, #4294967295
 8000b66:	e033      	b.n	8000bd0 <__swsetup_r+0x98>
 8000b68:	0758      	lsls	r0, r3, #29
 8000b6a:	d512      	bpl.n	8000b92 <__swsetup_r+0x5a>
 8000b6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b6e:	b141      	cbz	r1, 8000b82 <__swsetup_r+0x4a>
 8000b70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d002      	beq.n	8000b7e <__swsetup_r+0x46>
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f000 f8af 	bl	8000cdc <_free_r>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b82:	89a3      	ldrh	r3, [r4, #12]
 8000b84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000b88:	81a3      	strh	r3, [r4, #12]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	6063      	str	r3, [r4, #4]
 8000b8e:	6923      	ldr	r3, [r4, #16]
 8000b90:	6023      	str	r3, [r4, #0]
 8000b92:	89a3      	ldrh	r3, [r4, #12]
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	81a3      	strh	r3, [r4, #12]
 8000b9a:	6923      	ldr	r3, [r4, #16]
 8000b9c:	b94b      	cbnz	r3, 8000bb2 <__swsetup_r+0x7a>
 8000b9e:	89a3      	ldrh	r3, [r4, #12]
 8000ba0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ba8:	d003      	beq.n	8000bb2 <__swsetup_r+0x7a>
 8000baa:	4621      	mov	r1, r4
 8000bac:	4628      	mov	r0, r5
 8000bae:	f000 fa5f 	bl	8001070 <__smakebuf_r>
 8000bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bb6:	f013 0201 	ands.w	r2, r3, #1
 8000bba:	d00a      	beq.n	8000bd2 <__swsetup_r+0x9a>
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60a2      	str	r2, [r4, #8]
 8000bc0:	6962      	ldr	r2, [r4, #20]
 8000bc2:	4252      	negs	r2, r2
 8000bc4:	61a2      	str	r2, [r4, #24]
 8000bc6:	6922      	ldr	r2, [r4, #16]
 8000bc8:	b942      	cbnz	r2, 8000bdc <__swsetup_r+0xa4>
 8000bca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000bce:	d1c5      	bne.n	8000b5c <__swsetup_r+0x24>
 8000bd0:	bd38      	pop	{r3, r4, r5, pc}
 8000bd2:	0799      	lsls	r1, r3, #30
 8000bd4:	bf58      	it	pl
 8000bd6:	6962      	ldrpl	r2, [r4, #20]
 8000bd8:	60a2      	str	r2, [r4, #8]
 8000bda:	e7f4      	b.n	8000bc6 <__swsetup_r+0x8e>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	e7f7      	b.n	8000bd0 <__swsetup_r+0x98>
 8000be0:	2000000c 	.word	0x2000000c

08000be4 <memset>:
 8000be4:	4402      	add	r2, r0
 8000be6:	4603      	mov	r3, r0
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d100      	bne.n	8000bee <memset+0xa>
 8000bec:	4770      	bx	lr
 8000bee:	f803 1b01 	strb.w	r1, [r3], #1
 8000bf2:	e7f9      	b.n	8000be8 <memset+0x4>

08000bf4 <_close_r>:
 8000bf4:	b538      	push	{r3, r4, r5, lr}
 8000bf6:	4d06      	ldr	r5, [pc, #24]	@ (8000c10 <_close_r+0x1c>)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	602b      	str	r3, [r5, #0]
 8000c00:	f7ff fd63 	bl	80006ca <_close>
 8000c04:	1c43      	adds	r3, r0, #1
 8000c06:	d102      	bne.n	8000c0e <_close_r+0x1a>
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	b103      	cbz	r3, 8000c0e <_close_r+0x1a>
 8000c0c:	6023      	str	r3, [r4, #0]
 8000c0e:	bd38      	pop	{r3, r4, r5, pc}
 8000c10:	200001b8 	.word	0x200001b8

08000c14 <_lseek_r>:
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4d07      	ldr	r5, [pc, #28]	@ (8000c34 <_lseek_r+0x20>)
 8000c18:	4604      	mov	r4, r0
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	2200      	movs	r2, #0
 8000c20:	602a      	str	r2, [r5, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	f7ff fd78 	bl	8000718 <_lseek>
 8000c28:	1c43      	adds	r3, r0, #1
 8000c2a:	d102      	bne.n	8000c32 <_lseek_r+0x1e>
 8000c2c:	682b      	ldr	r3, [r5, #0]
 8000c2e:	b103      	cbz	r3, 8000c32 <_lseek_r+0x1e>
 8000c30:	6023      	str	r3, [r4, #0]
 8000c32:	bd38      	pop	{r3, r4, r5, pc}
 8000c34:	200001b8 	.word	0x200001b8

08000c38 <_read_r>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	4d07      	ldr	r5, [pc, #28]	@ (8000c58 <_read_r+0x20>)
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	4611      	mov	r1, r2
 8000c42:	2200      	movs	r2, #0
 8000c44:	602a      	str	r2, [r5, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	f7ff fd06 	bl	8000658 <_read>
 8000c4c:	1c43      	adds	r3, r0, #1
 8000c4e:	d102      	bne.n	8000c56 <_read_r+0x1e>
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	b103      	cbz	r3, 8000c56 <_read_r+0x1e>
 8000c54:	6023      	str	r3, [r4, #0]
 8000c56:	bd38      	pop	{r3, r4, r5, pc}
 8000c58:	200001b8 	.word	0x200001b8

08000c5c <_write_r>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	4d07      	ldr	r5, [pc, #28]	@ (8000c7c <_write_r+0x20>)
 8000c60:	4604      	mov	r4, r0
 8000c62:	4608      	mov	r0, r1
 8000c64:	4611      	mov	r1, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	602a      	str	r2, [r5, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f7ff fd11 	bl	8000692 <_write>
 8000c70:	1c43      	adds	r3, r0, #1
 8000c72:	d102      	bne.n	8000c7a <_write_r+0x1e>
 8000c74:	682b      	ldr	r3, [r5, #0]
 8000c76:	b103      	cbz	r3, 8000c7a <_write_r+0x1e>
 8000c78:	6023      	str	r3, [r4, #0]
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
 8000c7c:	200001b8 	.word	0x200001b8

08000c80 <__errno>:
 8000c80:	4b01      	ldr	r3, [pc, #4]	@ (8000c88 <__errno+0x8>)
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	2000000c 	.word	0x2000000c

08000c8c <__libc_init_array>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8000cc4 <__libc_init_array+0x38>)
 8000c90:	4c0d      	ldr	r4, [pc, #52]	@ (8000cc8 <__libc_init_array+0x3c>)
 8000c92:	1b64      	subs	r4, r4, r5
 8000c94:	10a4      	asrs	r4, r4, #2
 8000c96:	2600      	movs	r6, #0
 8000c98:	42a6      	cmp	r6, r4
 8000c9a:	d109      	bne.n	8000cb0 <__libc_init_array+0x24>
 8000c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8000ccc <__libc_init_array+0x40>)
 8000c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8000cd0 <__libc_init_array+0x44>)
 8000ca0:	f000 fa54 	bl	800114c <_init>
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	10a4      	asrs	r4, r4, #2
 8000ca8:	2600      	movs	r6, #0
 8000caa:	42a6      	cmp	r6, r4
 8000cac:	d105      	bne.n	8000cba <__libc_init_array+0x2e>
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cb4:	4798      	blx	r3
 8000cb6:	3601      	adds	r6, #1
 8000cb8:	e7ee      	b.n	8000c98 <__libc_init_array+0xc>
 8000cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cbe:	4798      	blx	r3
 8000cc0:	3601      	adds	r6, #1
 8000cc2:	e7f2      	b.n	8000caa <__libc_init_array+0x1e>
 8000cc4:	080011a4 	.word	0x080011a4
 8000cc8:	080011a4 	.word	0x080011a4
 8000ccc:	080011a4 	.word	0x080011a4
 8000cd0:	080011a8 	.word	0x080011a8

08000cd4 <__retarget_lock_init_recursive>:
 8000cd4:	4770      	bx	lr

08000cd6 <__retarget_lock_acquire_recursive>:
 8000cd6:	4770      	bx	lr

08000cd8 <__retarget_lock_release_recursive>:
 8000cd8:	4770      	bx	lr
	...

08000cdc <_free_r>:
 8000cdc:	b538      	push	{r3, r4, r5, lr}
 8000cde:	4605      	mov	r5, r0
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	d041      	beq.n	8000d68 <_free_r+0x8c>
 8000ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ce8:	1f0c      	subs	r4, r1, #4
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bfb8      	it	lt
 8000cee:	18e4      	addlt	r4, r4, r3
 8000cf0:	f000 f8e0 	bl	8000eb4 <__malloc_lock>
 8000cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d6c <_free_r+0x90>)
 8000cf6:	6813      	ldr	r3, [r2, #0]
 8000cf8:	b933      	cbnz	r3, 8000d08 <_free_r+0x2c>
 8000cfa:	6063      	str	r3, [r4, #4]
 8000cfc:	6014      	str	r4, [r2, #0]
 8000cfe:	4628      	mov	r0, r5
 8000d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d04:	f000 b8dc 	b.w	8000ec0 <__malloc_unlock>
 8000d08:	42a3      	cmp	r3, r4
 8000d0a:	d908      	bls.n	8000d1e <_free_r+0x42>
 8000d0c:	6820      	ldr	r0, [r4, #0]
 8000d0e:	1821      	adds	r1, r4, r0
 8000d10:	428b      	cmp	r3, r1
 8000d12:	bf01      	itttt	eq
 8000d14:	6819      	ldreq	r1, [r3, #0]
 8000d16:	685b      	ldreq	r3, [r3, #4]
 8000d18:	1809      	addeq	r1, r1, r0
 8000d1a:	6021      	streq	r1, [r4, #0]
 8000d1c:	e7ed      	b.n	8000cfa <_free_r+0x1e>
 8000d1e:	461a      	mov	r2, r3
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	b10b      	cbz	r3, 8000d28 <_free_r+0x4c>
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d9fa      	bls.n	8000d1e <_free_r+0x42>
 8000d28:	6811      	ldr	r1, [r2, #0]
 8000d2a:	1850      	adds	r0, r2, r1
 8000d2c:	42a0      	cmp	r0, r4
 8000d2e:	d10b      	bne.n	8000d48 <_free_r+0x6c>
 8000d30:	6820      	ldr	r0, [r4, #0]
 8000d32:	4401      	add	r1, r0
 8000d34:	1850      	adds	r0, r2, r1
 8000d36:	4283      	cmp	r3, r0
 8000d38:	6011      	str	r1, [r2, #0]
 8000d3a:	d1e0      	bne.n	8000cfe <_free_r+0x22>
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	6053      	str	r3, [r2, #4]
 8000d42:	4408      	add	r0, r1
 8000d44:	6010      	str	r0, [r2, #0]
 8000d46:	e7da      	b.n	8000cfe <_free_r+0x22>
 8000d48:	d902      	bls.n	8000d50 <_free_r+0x74>
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	602b      	str	r3, [r5, #0]
 8000d4e:	e7d6      	b.n	8000cfe <_free_r+0x22>
 8000d50:	6820      	ldr	r0, [r4, #0]
 8000d52:	1821      	adds	r1, r4, r0
 8000d54:	428b      	cmp	r3, r1
 8000d56:	bf04      	itt	eq
 8000d58:	6819      	ldreq	r1, [r3, #0]
 8000d5a:	685b      	ldreq	r3, [r3, #4]
 8000d5c:	6063      	str	r3, [r4, #4]
 8000d5e:	bf04      	itt	eq
 8000d60:	1809      	addeq	r1, r1, r0
 8000d62:	6021      	streq	r1, [r4, #0]
 8000d64:	6054      	str	r4, [r2, #4]
 8000d66:	e7ca      	b.n	8000cfe <_free_r+0x22>
 8000d68:	bd38      	pop	{r3, r4, r5, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001c4 	.word	0x200001c4

08000d70 <sbrk_aligned>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	4e0f      	ldr	r6, [pc, #60]	@ (8000db0 <sbrk_aligned+0x40>)
 8000d74:	460c      	mov	r4, r1
 8000d76:	6831      	ldr	r1, [r6, #0]
 8000d78:	4605      	mov	r5, r0
 8000d7a:	b911      	cbnz	r1, 8000d82 <sbrk_aligned+0x12>
 8000d7c:	f000 f9d6 	bl	800112c <_sbrk_r>
 8000d80:	6030      	str	r0, [r6, #0]
 8000d82:	4621      	mov	r1, r4
 8000d84:	4628      	mov	r0, r5
 8000d86:	f000 f9d1 	bl	800112c <_sbrk_r>
 8000d8a:	1c43      	adds	r3, r0, #1
 8000d8c:	d103      	bne.n	8000d96 <sbrk_aligned+0x26>
 8000d8e:	f04f 34ff 	mov.w	r4, #4294967295
 8000d92:	4620      	mov	r0, r4
 8000d94:	bd70      	pop	{r4, r5, r6, pc}
 8000d96:	1cc4      	adds	r4, r0, #3
 8000d98:	f024 0403 	bic.w	r4, r4, #3
 8000d9c:	42a0      	cmp	r0, r4
 8000d9e:	d0f8      	beq.n	8000d92 <sbrk_aligned+0x22>
 8000da0:	1a21      	subs	r1, r4, r0
 8000da2:	4628      	mov	r0, r5
 8000da4:	f000 f9c2 	bl	800112c <_sbrk_r>
 8000da8:	3001      	adds	r0, #1
 8000daa:	d1f2      	bne.n	8000d92 <sbrk_aligned+0x22>
 8000dac:	e7ef      	b.n	8000d8e <sbrk_aligned+0x1e>
 8000dae:	bf00      	nop
 8000db0:	200001c0 	.word	0x200001c0

08000db4 <_malloc_r>:
 8000db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000db8:	1ccd      	adds	r5, r1, #3
 8000dba:	f025 0503 	bic.w	r5, r5, #3
 8000dbe:	3508      	adds	r5, #8
 8000dc0:	2d0c      	cmp	r5, #12
 8000dc2:	bf38      	it	cc
 8000dc4:	250c      	movcc	r5, #12
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	4606      	mov	r6, r0
 8000dca:	db01      	blt.n	8000dd0 <_malloc_r+0x1c>
 8000dcc:	42a9      	cmp	r1, r5
 8000dce:	d904      	bls.n	8000dda <_malloc_r+0x26>
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	6033      	str	r3, [r6, #0]
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000eb0 <_malloc_r+0xfc>
 8000dde:	f000 f869 	bl	8000eb4 <__malloc_lock>
 8000de2:	f8d8 3000 	ldr.w	r3, [r8]
 8000de6:	461c      	mov	r4, r3
 8000de8:	bb44      	cbnz	r4, 8000e3c <_malloc_r+0x88>
 8000dea:	4629      	mov	r1, r5
 8000dec:	4630      	mov	r0, r6
 8000dee:	f7ff ffbf 	bl	8000d70 <sbrk_aligned>
 8000df2:	1c43      	adds	r3, r0, #1
 8000df4:	4604      	mov	r4, r0
 8000df6:	d158      	bne.n	8000eaa <_malloc_r+0xf6>
 8000df8:	f8d8 4000 	ldr.w	r4, [r8]
 8000dfc:	4627      	mov	r7, r4
 8000dfe:	2f00      	cmp	r7, #0
 8000e00:	d143      	bne.n	8000e8a <_malloc_r+0xd6>
 8000e02:	2c00      	cmp	r4, #0
 8000e04:	d04b      	beq.n	8000e9e <_malloc_r+0xea>
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	4639      	mov	r1, r7
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	eb04 0903 	add.w	r9, r4, r3
 8000e10:	f000 f98c 	bl	800112c <_sbrk_r>
 8000e14:	4581      	cmp	r9, r0
 8000e16:	d142      	bne.n	8000e9e <_malloc_r+0xea>
 8000e18:	6821      	ldr	r1, [r4, #0]
 8000e1a:	1a6d      	subs	r5, r5, r1
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f7ff ffa6 	bl	8000d70 <sbrk_aligned>
 8000e24:	3001      	adds	r0, #1
 8000e26:	d03a      	beq.n	8000e9e <_malloc_r+0xea>
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	442b      	add	r3, r5
 8000e2c:	6023      	str	r3, [r4, #0]
 8000e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	bb62      	cbnz	r2, 8000e90 <_malloc_r+0xdc>
 8000e36:	f8c8 7000 	str.w	r7, [r8]
 8000e3a:	e00f      	b.n	8000e5c <_malloc_r+0xa8>
 8000e3c:	6822      	ldr	r2, [r4, #0]
 8000e3e:	1b52      	subs	r2, r2, r5
 8000e40:	d420      	bmi.n	8000e84 <_malloc_r+0xd0>
 8000e42:	2a0b      	cmp	r2, #11
 8000e44:	d917      	bls.n	8000e76 <_malloc_r+0xc2>
 8000e46:	1961      	adds	r1, r4, r5
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	6025      	str	r5, [r4, #0]
 8000e4c:	bf18      	it	ne
 8000e4e:	6059      	strne	r1, [r3, #4]
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	bf08      	it	eq
 8000e54:	f8c8 1000 	streq.w	r1, [r8]
 8000e58:	5162      	str	r2, [r4, r5]
 8000e5a:	604b      	str	r3, [r1, #4]
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	f000 f82f 	bl	8000ec0 <__malloc_unlock>
 8000e62:	f104 000b 	add.w	r0, r4, #11
 8000e66:	1d23      	adds	r3, r4, #4
 8000e68:	f020 0007 	bic.w	r0, r0, #7
 8000e6c:	1ac2      	subs	r2, r0, r3
 8000e6e:	bf1c      	itt	ne
 8000e70:	1a1b      	subne	r3, r3, r0
 8000e72:	50a3      	strne	r3, [r4, r2]
 8000e74:	e7af      	b.n	8000dd6 <_malloc_r+0x22>
 8000e76:	6862      	ldr	r2, [r4, #4]
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	bf0c      	ite	eq
 8000e7c:	f8c8 2000 	streq.w	r2, [r8]
 8000e80:	605a      	strne	r2, [r3, #4]
 8000e82:	e7eb      	b.n	8000e5c <_malloc_r+0xa8>
 8000e84:	4623      	mov	r3, r4
 8000e86:	6864      	ldr	r4, [r4, #4]
 8000e88:	e7ae      	b.n	8000de8 <_malloc_r+0x34>
 8000e8a:	463c      	mov	r4, r7
 8000e8c:	687f      	ldr	r7, [r7, #4]
 8000e8e:	e7b6      	b.n	8000dfe <_malloc_r+0x4a>
 8000e90:	461a      	mov	r2, r3
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	42a3      	cmp	r3, r4
 8000e96:	d1fb      	bne.n	8000e90 <_malloc_r+0xdc>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	6053      	str	r3, [r2, #4]
 8000e9c:	e7de      	b.n	8000e5c <_malloc_r+0xa8>
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	6033      	str	r3, [r6, #0]
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	f000 f80c 	bl	8000ec0 <__malloc_unlock>
 8000ea8:	e794      	b.n	8000dd4 <_malloc_r+0x20>
 8000eaa:	6005      	str	r5, [r0, #0]
 8000eac:	e7d6      	b.n	8000e5c <_malloc_r+0xa8>
 8000eae:	bf00      	nop
 8000eb0:	200001c4 	.word	0x200001c4

08000eb4 <__malloc_lock>:
 8000eb4:	4801      	ldr	r0, [pc, #4]	@ (8000ebc <__malloc_lock+0x8>)
 8000eb6:	f7ff bf0e 	b.w	8000cd6 <__retarget_lock_acquire_recursive>
 8000eba:	bf00      	nop
 8000ebc:	200001bc 	.word	0x200001bc

08000ec0 <__malloc_unlock>:
 8000ec0:	4801      	ldr	r0, [pc, #4]	@ (8000ec8 <__malloc_unlock+0x8>)
 8000ec2:	f7ff bf09 	b.w	8000cd8 <__retarget_lock_release_recursive>
 8000ec6:	bf00      	nop
 8000ec8:	200001bc 	.word	0x200001bc

08000ecc <__sflush_r>:
 8000ecc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed4:	0716      	lsls	r6, r2, #28
 8000ed6:	4605      	mov	r5, r0
 8000ed8:	460c      	mov	r4, r1
 8000eda:	d454      	bmi.n	8000f86 <__sflush_r+0xba>
 8000edc:	684b      	ldr	r3, [r1, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	dc02      	bgt.n	8000ee8 <__sflush_r+0x1c>
 8000ee2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dd48      	ble.n	8000f7a <__sflush_r+0xae>
 8000ee8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d045      	beq.n	8000f7a <__sflush_r+0xae>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000ef4:	682f      	ldr	r7, [r5, #0]
 8000ef6:	6a21      	ldr	r1, [r4, #32]
 8000ef8:	602b      	str	r3, [r5, #0]
 8000efa:	d030      	beq.n	8000f5e <__sflush_r+0x92>
 8000efc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000efe:	89a3      	ldrh	r3, [r4, #12]
 8000f00:	0759      	lsls	r1, r3, #29
 8000f02:	d505      	bpl.n	8000f10 <__sflush_r+0x44>
 8000f04:	6863      	ldr	r3, [r4, #4]
 8000f06:	1ad2      	subs	r2, r2, r3
 8000f08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000f0a:	b10b      	cbz	r3, 8000f10 <__sflush_r+0x44>
 8000f0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f0e:	1ad2      	subs	r2, r2, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f14:	6a21      	ldr	r1, [r4, #32]
 8000f16:	4628      	mov	r0, r5
 8000f18:	47b0      	blx	r6
 8000f1a:	1c43      	adds	r3, r0, #1
 8000f1c:	89a3      	ldrh	r3, [r4, #12]
 8000f1e:	d106      	bne.n	8000f2e <__sflush_r+0x62>
 8000f20:	6829      	ldr	r1, [r5, #0]
 8000f22:	291d      	cmp	r1, #29
 8000f24:	d82b      	bhi.n	8000f7e <__sflush_r+0xb2>
 8000f26:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd0 <__sflush_r+0x104>)
 8000f28:	410a      	asrs	r2, r1
 8000f2a:	07d6      	lsls	r6, r2, #31
 8000f2c:	d427      	bmi.n	8000f7e <__sflush_r+0xb2>
 8000f2e:	2200      	movs	r2, #0
 8000f30:	6062      	str	r2, [r4, #4]
 8000f32:	04d9      	lsls	r1, r3, #19
 8000f34:	6922      	ldr	r2, [r4, #16]
 8000f36:	6022      	str	r2, [r4, #0]
 8000f38:	d504      	bpl.n	8000f44 <__sflush_r+0x78>
 8000f3a:	1c42      	adds	r2, r0, #1
 8000f3c:	d101      	bne.n	8000f42 <__sflush_r+0x76>
 8000f3e:	682b      	ldr	r3, [r5, #0]
 8000f40:	b903      	cbnz	r3, 8000f44 <__sflush_r+0x78>
 8000f42:	6560      	str	r0, [r4, #84]	@ 0x54
 8000f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000f46:	602f      	str	r7, [r5, #0]
 8000f48:	b1b9      	cbz	r1, 8000f7a <__sflush_r+0xae>
 8000f4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d002      	beq.n	8000f58 <__sflush_r+0x8c>
 8000f52:	4628      	mov	r0, r5
 8000f54:	f7ff fec2 	bl	8000cdc <_free_r>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8000f5c:	e00d      	b.n	8000f7a <__sflush_r+0xae>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4628      	mov	r0, r5
 8000f62:	47b0      	blx	r6
 8000f64:	4602      	mov	r2, r0
 8000f66:	1c50      	adds	r0, r2, #1
 8000f68:	d1c9      	bne.n	8000efe <__sflush_r+0x32>
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0c6      	beq.n	8000efe <__sflush_r+0x32>
 8000f70:	2b1d      	cmp	r3, #29
 8000f72:	d001      	beq.n	8000f78 <__sflush_r+0xac>
 8000f74:	2b16      	cmp	r3, #22
 8000f76:	d11e      	bne.n	8000fb6 <__sflush_r+0xea>
 8000f78:	602f      	str	r7, [r5, #0]
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	e022      	b.n	8000fc4 <__sflush_r+0xf8>
 8000f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	e01b      	b.n	8000fbe <__sflush_r+0xf2>
 8000f86:	690f      	ldr	r7, [r1, #16]
 8000f88:	2f00      	cmp	r7, #0
 8000f8a:	d0f6      	beq.n	8000f7a <__sflush_r+0xae>
 8000f8c:	0793      	lsls	r3, r2, #30
 8000f8e:	680e      	ldr	r6, [r1, #0]
 8000f90:	bf08      	it	eq
 8000f92:	694b      	ldreq	r3, [r1, #20]
 8000f94:	600f      	str	r7, [r1, #0]
 8000f96:	bf18      	it	ne
 8000f98:	2300      	movne	r3, #0
 8000f9a:	eba6 0807 	sub.w	r8, r6, r7
 8000f9e:	608b      	str	r3, [r1, #8]
 8000fa0:	f1b8 0f00 	cmp.w	r8, #0
 8000fa4:	dde9      	ble.n	8000f7a <__sflush_r+0xae>
 8000fa6:	6a21      	ldr	r1, [r4, #32]
 8000fa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000faa:	4643      	mov	r3, r8
 8000fac:	463a      	mov	r2, r7
 8000fae:	4628      	mov	r0, r5
 8000fb0:	47b0      	blx	r6
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	dc08      	bgt.n	8000fc8 <__sflush_r+0xfc>
 8000fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fbe:	81a3      	strh	r3, [r4, #12]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fc8:	4407      	add	r7, r0
 8000fca:	eba8 0800 	sub.w	r8, r8, r0
 8000fce:	e7e7      	b.n	8000fa0 <__sflush_r+0xd4>
 8000fd0:	dfbffffe 	.word	0xdfbffffe

08000fd4 <_fflush_r>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	690b      	ldr	r3, [r1, #16]
 8000fd8:	4605      	mov	r5, r0
 8000fda:	460c      	mov	r4, r1
 8000fdc:	b913      	cbnz	r3, 8000fe4 <_fflush_r+0x10>
 8000fde:	2500      	movs	r5, #0
 8000fe0:	4628      	mov	r0, r5
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
 8000fe4:	b118      	cbz	r0, 8000fee <_fflush_r+0x1a>
 8000fe6:	6a03      	ldr	r3, [r0, #32]
 8000fe8:	b90b      	cbnz	r3, 8000fee <_fflush_r+0x1a>
 8000fea:	f7ff fc8f 	bl	800090c <__sinit>
 8000fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f3      	beq.n	8000fde <_fflush_r+0xa>
 8000ff6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000ff8:	07d0      	lsls	r0, r2, #31
 8000ffa:	d404      	bmi.n	8001006 <_fflush_r+0x32>
 8000ffc:	0599      	lsls	r1, r3, #22
 8000ffe:	d402      	bmi.n	8001006 <_fflush_r+0x32>
 8001000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001002:	f7ff fe68 	bl	8000cd6 <__retarget_lock_acquire_recursive>
 8001006:	4628      	mov	r0, r5
 8001008:	4621      	mov	r1, r4
 800100a:	f7ff ff5f 	bl	8000ecc <__sflush_r>
 800100e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001010:	07da      	lsls	r2, r3, #31
 8001012:	4605      	mov	r5, r0
 8001014:	d4e4      	bmi.n	8000fe0 <_fflush_r+0xc>
 8001016:	89a3      	ldrh	r3, [r4, #12]
 8001018:	059b      	lsls	r3, r3, #22
 800101a:	d4e1      	bmi.n	8000fe0 <_fflush_r+0xc>
 800101c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800101e:	f7ff fe5b 	bl	8000cd8 <__retarget_lock_release_recursive>
 8001022:	e7dd      	b.n	8000fe0 <_fflush_r+0xc>

08001024 <__swhatbuf_r>:
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	460c      	mov	r4, r1
 8001028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800102c:	2900      	cmp	r1, #0
 800102e:	b096      	sub	sp, #88	@ 0x58
 8001030:	4615      	mov	r5, r2
 8001032:	461e      	mov	r6, r3
 8001034:	da0d      	bge.n	8001052 <__swhatbuf_r+0x2e>
 8001036:	89a3      	ldrh	r3, [r4, #12]
 8001038:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800103c:	f04f 0100 	mov.w	r1, #0
 8001040:	bf14      	ite	ne
 8001042:	2340      	movne	r3, #64	@ 0x40
 8001044:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001048:	2000      	movs	r0, #0
 800104a:	6031      	str	r1, [r6, #0]
 800104c:	602b      	str	r3, [r5, #0]
 800104e:	b016      	add	sp, #88	@ 0x58
 8001050:	bd70      	pop	{r4, r5, r6, pc}
 8001052:	466a      	mov	r2, sp
 8001054:	f000 f848 	bl	80010e8 <_fstat_r>
 8001058:	2800      	cmp	r0, #0
 800105a:	dbec      	blt.n	8001036 <__swhatbuf_r+0x12>
 800105c:	9901      	ldr	r1, [sp, #4]
 800105e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001062:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001066:	4259      	negs	r1, r3
 8001068:	4159      	adcs	r1, r3
 800106a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800106e:	e7eb      	b.n	8001048 <__swhatbuf_r+0x24>

08001070 <__smakebuf_r>:
 8001070:	898b      	ldrh	r3, [r1, #12]
 8001072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001074:	079d      	lsls	r5, r3, #30
 8001076:	4606      	mov	r6, r0
 8001078:	460c      	mov	r4, r1
 800107a:	d507      	bpl.n	800108c <__smakebuf_r+0x1c>
 800107c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001080:	6023      	str	r3, [r4, #0]
 8001082:	6123      	str	r3, [r4, #16]
 8001084:	2301      	movs	r3, #1
 8001086:	6163      	str	r3, [r4, #20]
 8001088:	b003      	add	sp, #12
 800108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108c:	ab01      	add	r3, sp, #4
 800108e:	466a      	mov	r2, sp
 8001090:	f7ff ffc8 	bl	8001024 <__swhatbuf_r>
 8001094:	9f00      	ldr	r7, [sp, #0]
 8001096:	4605      	mov	r5, r0
 8001098:	4639      	mov	r1, r7
 800109a:	4630      	mov	r0, r6
 800109c:	f7ff fe8a 	bl	8000db4 <_malloc_r>
 80010a0:	b948      	cbnz	r0, 80010b6 <__smakebuf_r+0x46>
 80010a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010a6:	059a      	lsls	r2, r3, #22
 80010a8:	d4ee      	bmi.n	8001088 <__smakebuf_r+0x18>
 80010aa:	f023 0303 	bic.w	r3, r3, #3
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	81a3      	strh	r3, [r4, #12]
 80010b4:	e7e2      	b.n	800107c <__smakebuf_r+0xc>
 80010b6:	89a3      	ldrh	r3, [r4, #12]
 80010b8:	6020      	str	r0, [r4, #0]
 80010ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010be:	81a3      	strh	r3, [r4, #12]
 80010c0:	9b01      	ldr	r3, [sp, #4]
 80010c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80010c6:	b15b      	cbz	r3, 80010e0 <__smakebuf_r+0x70>
 80010c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010cc:	4630      	mov	r0, r6
 80010ce:	f000 f81d 	bl	800110c <_isatty_r>
 80010d2:	b128      	cbz	r0, 80010e0 <__smakebuf_r+0x70>
 80010d4:	89a3      	ldrh	r3, [r4, #12]
 80010d6:	f023 0303 	bic.w	r3, r3, #3
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	81a3      	strh	r3, [r4, #12]
 80010e0:	89a3      	ldrh	r3, [r4, #12]
 80010e2:	431d      	orrs	r5, r3
 80010e4:	81a5      	strh	r5, [r4, #12]
 80010e6:	e7cf      	b.n	8001088 <__smakebuf_r+0x18>

080010e8 <_fstat_r>:
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	4d07      	ldr	r5, [pc, #28]	@ (8001108 <_fstat_r+0x20>)
 80010ec:	2300      	movs	r3, #0
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	602b      	str	r3, [r5, #0]
 80010f6:	f7ff faf4 	bl	80006e2 <_fstat>
 80010fa:	1c43      	adds	r3, r0, #1
 80010fc:	d102      	bne.n	8001104 <_fstat_r+0x1c>
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	b103      	cbz	r3, 8001104 <_fstat_r+0x1c>
 8001102:	6023      	str	r3, [r4, #0]
 8001104:	bd38      	pop	{r3, r4, r5, pc}
 8001106:	bf00      	nop
 8001108:	200001b8 	.word	0x200001b8

0800110c <_isatty_r>:
 800110c:	b538      	push	{r3, r4, r5, lr}
 800110e:	4d06      	ldr	r5, [pc, #24]	@ (8001128 <_isatty_r+0x1c>)
 8001110:	2300      	movs	r3, #0
 8001112:	4604      	mov	r4, r0
 8001114:	4608      	mov	r0, r1
 8001116:	602b      	str	r3, [r5, #0]
 8001118:	f7ff faf3 	bl	8000702 <_isatty>
 800111c:	1c43      	adds	r3, r0, #1
 800111e:	d102      	bne.n	8001126 <_isatty_r+0x1a>
 8001120:	682b      	ldr	r3, [r5, #0]
 8001122:	b103      	cbz	r3, 8001126 <_isatty_r+0x1a>
 8001124:	6023      	str	r3, [r4, #0]
 8001126:	bd38      	pop	{r3, r4, r5, pc}
 8001128:	200001b8 	.word	0x200001b8

0800112c <_sbrk_r>:
 800112c:	b538      	push	{r3, r4, r5, lr}
 800112e:	4d06      	ldr	r5, [pc, #24]	@ (8001148 <_sbrk_r+0x1c>)
 8001130:	2300      	movs	r3, #0
 8001132:	4604      	mov	r4, r0
 8001134:	4608      	mov	r0, r1
 8001136:	602b      	str	r3, [r5, #0]
 8001138:	f7ff fafc 	bl	8000734 <_sbrk>
 800113c:	1c43      	adds	r3, r0, #1
 800113e:	d102      	bne.n	8001146 <_sbrk_r+0x1a>
 8001140:	682b      	ldr	r3, [r5, #0]
 8001142:	b103      	cbz	r3, 8001146 <_sbrk_r+0x1a>
 8001144:	6023      	str	r3, [r4, #0]
 8001146:	bd38      	pop	{r3, r4, r5, pc}
 8001148:	200001b8 	.word	0x200001b8

0800114c <_init>:
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	bf00      	nop
 8001150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001152:	bc08      	pop	{r3}
 8001154:	469e      	mov	lr, r3
 8001156:	4770      	bx	lr

08001158 <_fini>:
 8001158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115a:	bf00      	nop
 800115c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800115e:	bc08      	pop	{r3}
 8001160:	469e      	mov	lr, r3
 8001162:	4770      	bx	lr
